import requests as req
import timeit
import time
import pandas as pd
from IPython.display import Image, HTML
import random
from tqdm import tqdm
from ratelimit import limits, sleep_and_retry
 
@sleep_and_retry
@limits(calls=100, period=60)
def call_api (url) :
    response = req.get(url)
 
    if response.status_code == 404 :
        return 'Not Found'
    if response.status_code != 200 :
        print( 'here' , status_code, url)
        raise Exception( 'API response: {}' .format(response.status_code))
    return response
 
 
API_POKEMON = 'https://pokeapi.co/api/v2/pokemon/{pokemon}'
 
def get_number_pokemon () :
    res = req.get(API_POKEMON.format(pokemon= '' ))
    number_pokemon = res.json()[ 'count' ]
    res_url = call_api(API_POKEMON.format(pokemon= '?offset=0&limit={limit}' .format(limit=str(number_pokemon))))
    pokemon_links_values = [link[ 'url' ] for link in res_url.json()[ 'results' ]]
    return pokemon_links_values
 
def get_pokemon (link= '' ) :
    
    info = None
    resolved = False
    
    try :
        while not resolved:
            
 
            res = None
            tooManyCalls = False
 
            try :
                res = call_api(link)
                if res == 'Not Found' :
                    resolved = True
                    break
            except Exception as e:
                print(e)
                if e == 'too many calls' :
                    tooManyCalls = True
            if tooManyCalls:
                time.sleep( 60 )
                    
            elif res.status_code < 300 :
 
                pokemon_info = res.json()
 
                info = {
                    'Image' : pokemon_info[ 'sprites' ][ 'front_default' ],
                    'id' : pokemon_info[ 'id' ],
                    'name' : pokemon_info[ 'name' ],
                    'height' : pokemon_info[ 'height' ],
                    'base_experience' : pokemon_info[ 'base_experience' ],
                    'weight' : pokemon_info[ 'weight' ],
                    'species' : pokemon_info[ 'species' ][ 'name' ]
 
                }
 
                resolved = True
 
            elif res.status_code == 429 :
                time.sleep( 60 )
            else :
                sleep_val = random.randint( 1 , 10 )
                time.sleep(sleep_val)
                
    except Exception as e:
        print(e)
        return info
    finally :
        return info
            
 
 
 
def get_all_pokemon (links_pokemon=None) :
    
    
    list_pokemon = []
    for link in tqdm(links_pokemon):
        
        pokemon = get_pokemon(link)
        if pokemon != None :
            list_pokemon.append(pokemon)
        time.sleep( 0.3 )
        
            
    pd.set_option( 'display.max_colwidth' , None )
 
    df_pokemon = pd.DataFrame(list_pokemon)
      
    return df_pokemon
    
 
def image_formatter (im) :
    return f'<img src=" {im} ">'
 
def main_pokemon_run () :
    links_pokemon = get_number_pokemon()
 
    df_pokemon = get_all_pokemon(links_pokemon=links_pokemon)
    
    df_pokemon.sort_values([ 'id' ],inplace= True )
    return df_pokemon, HTML(df_pokemon.iloc[ 0 : 4 ].to_html(formatters={ 'Image' : image_formatter}, escape= False ))
